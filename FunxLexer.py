# Generated from Funx.g by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,26,150,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,
        2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,
        13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,
        19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,1,
        0,1,0,1,1,1,1,1,1,1,2,1,2,1,3,1,3,1,4,1,4,1,4,1,5,1,5,1,5,1,6,1,
        6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,9,1,9,1,9,1,10,1,10,1,10,1,10,1,
        10,1,10,1,11,1,11,1,12,1,12,1,13,4,13,92,8,13,11,13,12,13,93,1,13,
        4,13,97,8,13,11,13,12,13,98,1,13,5,13,102,8,13,10,13,12,13,105,9,
        13,1,14,1,14,1,14,5,14,110,8,14,10,14,12,14,113,9,14,1,15,4,15,116,
        8,15,11,15,12,15,117,1,16,1,16,1,17,1,17,1,18,1,18,1,19,1,19,1,20,
        1,20,1,21,1,21,1,22,1,22,1,23,1,23,1,23,1,24,1,24,5,24,139,8,24,
        10,24,12,24,142,9,24,1,25,4,25,145,8,25,11,25,12,25,146,1,25,1,25,
        0,0,26,1,1,3,2,5,3,7,4,9,5,11,6,13,7,15,8,17,9,19,10,21,11,23,12,
        25,13,27,14,29,15,31,16,33,17,35,18,37,19,39,20,41,21,43,22,45,23,
        47,24,49,25,51,26,1,0,6,1,0,65,90,2,0,65,90,97,122,1,0,48,57,3,0,
        65,90,95,95,97,122,2,0,10,10,13,13,2,0,10,10,32,32,157,0,1,1,0,0,
        0,0,3,1,0,0,0,0,5,1,0,0,0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,
        13,1,0,0,0,0,15,1,0,0,0,0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,
        23,1,0,0,0,0,25,1,0,0,0,0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,
        33,1,0,0,0,0,35,1,0,0,0,0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,
        43,1,0,0,0,0,45,1,0,0,0,0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,1,
        53,1,0,0,0,3,55,1,0,0,0,5,58,1,0,0,0,7,60,1,0,0,0,9,62,1,0,0,0,11,
        65,1,0,0,0,13,68,1,0,0,0,15,71,1,0,0,0,17,73,1,0,0,0,19,75,1,0,0,
        0,21,80,1,0,0,0,23,86,1,0,0,0,25,88,1,0,0,0,27,91,1,0,0,0,29,106,
        1,0,0,0,31,115,1,0,0,0,33,119,1,0,0,0,35,121,1,0,0,0,37,123,1,0,
        0,0,39,125,1,0,0,0,41,127,1,0,0,0,43,129,1,0,0,0,45,131,1,0,0,0,
        47,133,1,0,0,0,49,136,1,0,0,0,51,144,1,0,0,0,53,54,5,61,0,0,54,2,
        1,0,0,0,55,56,5,33,0,0,56,57,5,61,0,0,57,4,1,0,0,0,58,59,5,60,0,
        0,59,6,1,0,0,0,60,61,5,62,0,0,61,8,1,0,0,0,62,63,5,60,0,0,63,64,
        5,61,0,0,64,10,1,0,0,0,65,66,5,62,0,0,66,67,5,61,0,0,67,12,1,0,0,
        0,68,69,5,105,0,0,69,70,5,102,0,0,70,14,1,0,0,0,71,72,5,123,0,0,
        72,16,1,0,0,0,73,74,5,125,0,0,74,18,1,0,0,0,75,76,5,101,0,0,76,77,
        5,108,0,0,77,78,5,115,0,0,78,79,5,101,0,0,79,20,1,0,0,0,80,81,5,
        119,0,0,81,82,5,104,0,0,82,83,5,105,0,0,83,84,5,108,0,0,84,85,5,
        101,0,0,85,22,1,0,0,0,86,87,5,40,0,0,87,24,1,0,0,0,88,89,5,41,0,
        0,89,26,1,0,0,0,90,92,7,0,0,0,91,90,1,0,0,0,92,93,1,0,0,0,93,91,
        1,0,0,0,93,94,1,0,0,0,94,96,1,0,0,0,95,97,7,1,0,0,96,95,1,0,0,0,
        97,98,1,0,0,0,98,96,1,0,0,0,98,99,1,0,0,0,99,103,1,0,0,0,100,102,
        3,43,21,0,101,100,1,0,0,0,102,105,1,0,0,0,103,101,1,0,0,0,103,104,
        1,0,0,0,104,28,1,0,0,0,105,103,1,0,0,0,106,111,3,45,22,0,107,110,
        3,45,22,0,108,110,3,43,21,0,109,107,1,0,0,0,109,108,1,0,0,0,110,
        113,1,0,0,0,111,109,1,0,0,0,111,112,1,0,0,0,112,30,1,0,0,0,113,111,
        1,0,0,0,114,116,7,2,0,0,115,114,1,0,0,0,116,117,1,0,0,0,117,115,
        1,0,0,0,117,118,1,0,0,0,118,32,1,0,0,0,119,120,5,42,0,0,120,34,1,
        0,0,0,121,122,5,47,0,0,122,36,1,0,0,0,123,124,5,94,0,0,124,38,1,
        0,0,0,125,126,5,43,0,0,126,40,1,0,0,0,127,128,5,45,0,0,128,42,1,
        0,0,0,129,130,7,2,0,0,130,44,1,0,0,0,131,132,7,3,0,0,132,46,1,0,
        0,0,133,134,5,60,0,0,134,135,5,45,0,0,135,48,1,0,0,0,136,140,5,35,
        0,0,137,139,8,4,0,0,138,137,1,0,0,0,139,142,1,0,0,0,140,138,1,0,
        0,0,140,141,1,0,0,0,141,50,1,0,0,0,142,140,1,0,0,0,143,145,7,5,0,
        0,144,143,1,0,0,0,145,146,1,0,0,0,146,144,1,0,0,0,146,147,1,0,0,
        0,147,148,1,0,0,0,148,149,6,25,0,0,149,52,1,0,0,0,9,0,93,98,103,
        109,111,117,140,146,1,6,0,0
    ]

class FunxLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    NOM_FUN = 14
    VAR = 15
    NUM = 16
    MUL = 17
    DIV = 18
    POT = 19
    SUM = 20
    RES = 21
    DIGIT = 22
    ALPHA = 23
    ASS = 24
    COMMENT = 25
    WS = 26

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'='", "'!='", "'<'", "'>'", "'<='", "'>='", "'if'", "'{'", 
            "'}'", "'else'", "'while'", "'('", "')'", "'*'", "'/'", "'^'", 
            "'+'", "'-'", "'<-'" ]

    symbolicNames = [ "<INVALID>",
            "NOM_FUN", "VAR", "NUM", "MUL", "DIV", "POT", "SUM", "RES", 
            "DIGIT", "ALPHA", "ASS", "COMMENT", "WS" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "NOM_FUN", 
                  "VAR", "NUM", "MUL", "DIV", "POT", "SUM", "RES", "DIGIT", 
                  "ALPHA", "ASS", "COMMENT", "WS" ]

    grammarFileName = "Funx.g"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


